find.package(devtools)
find.package("devtools")
find.package("rtools")
find.package("devtools")
find.package("devtools");
install.packages(devtools)
install.packages("devtools"")
library(devtools)
library()
>
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools);
library();
install("KernSmooth")
install(KernSmooth)
install("KernSmooth")
load(KernSmooth)
load("KernSmooth")
install.pakages(KernSmooth)
find.pakages("kernsmooth")
find.pakage("kernsmooth")
find.package("kernsmooth")
find.package("KernSmooth")
install.package("KernSmooth")
instal.package("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
clear
cl
clear()
cl()
```{r}
install.packages("swirl")
;
s
library(swirl)
swirl()
getwd()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
?swirl()
?InstallCourses()
install_from_swirl(Basic_Building_Blocks, dev = FALSE, mirror = "github")
install_from_swirl("Basic_Building_Blocks", dev = FALSE, mirror = "github")
install_from_swirl("Basic_Building_Blocks")
install_course_zip(C:\Users\User\Downloads\swirl_courses-master)
install_course_zip("C:\Users\User\Downloads\swirl_courses-master")
install_course_zip("\Users\User\Downloads\swirl_courses-master")
install_course_zip(\Users\User\Downloads\swirl_courses-master)
?install_course_zip
install_course_zip("~\Downloads\swirl_courses-master")
install_course_zip("~/Downloads/swirl_courses-master")
install_course_zip("~\Downloads\swirl_courses-master", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-maste.zipr", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-maste.zip", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course = "R Programming")
install_course_zip("~/Downloads/swirl_courses-master.zip")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course = "R Programming")
clear
cl
library(swirl)
install_course_directory("C:/Users/User/Downloads/swirl_courses-master")
swirl()
uninstall_all_courses()
install_course_directory("C:/Users/User/Downloads/swirl_courses-master/swirl_courses-master")
swirl()
swirl()
uninstall_all_courses()
install_course_directory("C:/Users/User/Downloads/swirl_courses-master/swirl_courses-master/R_Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4 ) + c(0, 10)
c(1, 2, 3, 4 ) + c(0, 10, 100)
z*2 + 1000
my_div
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!'
)
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0)
)
evaluate(function(x){x[1]+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)}, c(8, 4, 0))
evaluate(function(x){len <- length(x); x[len]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("this", "is", "a", "test")
submit()
submit()
mad_libs(place = "UNB", adjective = "happy", noun = "cats")
submit()
"I" p "love" p "R"
"I"p"love"p"R!"
"I"%p%"love"%p%"R!"
swirl()
swirl()
swirl()
swirl()
swirl()
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg,cyl,mean))
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$hp, mtcars$cyl, mean)
hpcyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hpcyl[1] - hpcyl[3]
sedwd(GitHub)
setwd("GitHub")
dir()
setwd(dir()[2])
library(MASS)
?ginv
?solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(1,-1,1,2)
a <- makeCacheMatrix(matrix(c(1,-1,1,2)))
cacheSolve(a)
a <- makeCacheMatrix(matrix(c(1,-1,1,2),2,2))
cacheSolve(a)
a
a <- matrix(c(1,-1,1,2),2,2)
makeCacheMatrix(a)
a
cachSolve(a)
cacheSolve(a)
b <- makeCacheMatrix(a)
b
a$get()
a
b$set(a)
b$get()
b
cacheSolve(b)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
b$get()
cacheSolve(b)
b$set(a)
b$get()
b$i
cacheSolve(b)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b$set(a)
cacheSolve(b)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
b$set(a)
cacheSolve(b)
b$set(a)
cacheSolve(b)
debug(cacheSolve(b))
b$set(a)
cacheSolve(b)
makeCacheMatrix()
a <- makeCacheMatrix()
b <- matrix(c(1, -1, 1, 2), 2, 2)
a$set(b)
cacheSolve(a)
a$getinv(
)
casheSolve(a)
cacheSolve(a)
makeCacheMatrix(c)
c<-makeCacheMatrix()
c$set(a)
cacheSolve(c)
c$set(b)
cacheSolve(c)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
c$set(b)
cacheSolve(c)
cacheSolve(c)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
